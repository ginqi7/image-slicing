#+title: Image Slicing
#+author: Qiqi Jin
#+language: zh


* 概述
在 Emacs 图片的展示逻辑与文本是一样的，占用一行。如果图片很高，它会调整当前行高适配图片。这种情况导致在 Emacs 当中滚动图片的体验相当糟糕。

尽管，在一些场景下，[[https://github.com/emacs-mirror/emacs/blob/master/lisp/pixel-scroll.el][pixel-scroll]] 和 [[https://github.com/emacs-mirror/emacs/blob/master/lisp/pixel-scroll.el][iscroll]] 已经提升了图片滚动的体验。但我仍旧希望能有一种方式，让图片功能和文本滚动有同样的使用感受。

因此我创建了这个包，把图片水平切割为多个部分，每张图片占用一行，连续拼接在一起。这样滚动图片和移动文本基本就是一样的。

在开发的过程, 我发现了一个包： [[https://github.com/jcfk/org-sliced-images][org-sliced-images]] ，它的思路和我想的基本一致。但提到了一个我不知道的方法 =insert-sliced-image=, 我参考了 =insert-sliced-image= 的实现。

* 前提

** CLI
*Curl*: 使用 Curl 异步下载 web 图片，如果没有 web 图片则不需要。

** 需要的 Emacs 包
+ *org-element*: 用于解析 Buffer 里的所有链接。
+ *image*: 用于创建 Image 对象。
+ *url-util* : 用于处理 URL 格式的工具。
+ *dash.el* : 一个现代的 Emacs 列表库。
+ *f.el* : 用于处理 Emacs 中文件和目录的现代 API
+ *s.el* : Emacs 字符串操作库。

** 安装 Image-slicing
+ 克隆 Image-slicing 项目到你自己的 Emacs 配置目录下：
#+BEGIN_SRC sh
    git clone https://github.com/magnars/dash.el ~/.emacs.d/lisp/dash;
    git clone http://github.com/rejeep/f.el ~/.emacs.d/lisp/f;
    git clone https://github.com/magnars/s.el ~/.emacs.d/lisp/s;
    git clone git@github.com:ginqi7/image-slicing.git ~/.emacs.d/lisp/image-slicing;
#+END_SRC

+ 把克隆的路径添加到 =load-path= 当中
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/lisp/dash")
    (add-to-list 'load-path "~/.emacs.d/lisp/f")
    (add-to-list 'load-path "~/.emacs.d/lisp/s")
    (add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp/image-slicing"))
#+END_SRC

* 配置

#+BEGIN_SRC emacs-lisp
(require 'image-slicing)
#+end_src

** 变量

| 变量                                |                              默认值 | 解释                          |
|-------------------------------------+------------------------------------+-------------------------------|
| image-slicing-download-concurrency  |                                 20 | 下载网络图片的最大并发数           |
| image-slicing-line-height-scale     |                                  2 | 图片切片占用几个行高              |
| image-slicing-max-width             |                                700 | 图片的最大宽度                   |
| image-slicing-cursor-fringe-bitmaps | '(left-fringe right-arrow warning) | 当前指针位置的边缘指示符样式 [fn:1] |

** Eww 配置
1. 取消 EWW 默认的图片渲染方法
#+BEGIN_SRC emacs-lisp
(add-to-list 'shr-external-rendering-functions
             '(img . image-slicing-tag-img))
#+end_src
2. 把 ~image-slicing~ 添加到 ~eww-after-render-hook~
#+BEGIN_SRC emacs-lisp
(push #'image-slicing-mode eww-after-render-hook)
#+end_src

** Elfeed 配置

#+begin_src emacs-lisp
  ;; add to shr-external-rendering-functions (skip if alread setup for eww)
  (add-to-list 'shr-external-rendering-functions
               '(img . image-slicing-tag-img))

  ;; advice `elfeed-show-entry' to trigger `image-slicing-mode'
  (advice-add #'elfeed-show-entry :after #'image-slicing-mode)
#+end_src

* 特性

- =image-slicing-mode=: 自动解析 buffer 中的图片链接，并用多行的形式渲染。
- =Asynchronous=: 异步下载 Web 图片。
- =Multiple Modes=: 支持多种模式的 buffer 例如：org-mode, eww, elfeed.


** 支持的链接格式
- Org 格式的链接
  - =[[url][tag]]=
  - =[[url]]=
- 常见格式的链接
  - =file:./hello.png=
  - =http://image.png=
- eww html 链接
  - <img src=''>
  - 支持 base64 格式的图片

* 例子

[[https://github.com/ginqi7/image-slicing/raw/main/screencast.gif]]

* 缺点

- 如果有许多的网络图片，它会生成需要的临时文件，在系统的临时目录下。
- 如果 URL 链接太短，图片的切片数目会比较少，那么单个切片的行高会比较高。
- 一次只有一个 buffer 能够被渲染。

* Todo List
- 适配 nov

* Footnotes

[fn:1] [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Fringe-Bitmaps.html][Emacs Fringe Bitmaps]]
